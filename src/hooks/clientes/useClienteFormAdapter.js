/**
 * üîÑ Adapter Pattern para migraci√≥n segura
 * 
 * Este adapter permite cambiar entre la versi√≥n original y refactorizada
 * de useClienteForm sin modificar el c√≥digo que lo consume.
 * 
 * Ventajas:
 * - ‚úÖ Migraci√≥n transparente para componentes
 * - ‚úÖ Rollback instant√°neo
 * - ‚úÖ Testing comparativo (old vs new)
 * - ‚úÖ Zero-downtime deployment
 * 
 * @example
 * // En lugar de:
 * import { useClienteForm } from './useClienteForm';
 * 
 * // Usar:
 * import { useClienteFormAdapter as useClienteForm } from './useClienteFormAdapter';
 */

import { isFeatureEnabled } from '@/config/featureFlags';
import { useClienteForm as useClienteFormOld } from './useClienteForm';
import { useClienteForm as useClienteFormNew } from './v2/useClienteForm';

/**
 * Adapter que decide qu√© versi√≥n del hook usar
 * 
 * @param {boolean} isEditing - Si es modo edici√≥n
 * @param {Object} clienteAEditar - Cliente a editar (null si es nuevo)
 * @param {Function} onSaveSuccess - Callback al guardar exitosamente
 * @param {string} modo - Modo: 'crear' | 'editar' | 'reactivar'
 * @returns {Object} Mismo objeto que useClienteForm original
 */
export const useClienteFormAdapter = (isEditing, clienteAEditar, onSaveSuccess, modo) => {
    // ‚ö†Ô∏è IMPORTANTE: Verificar flags ANTES de llamar hooks
    // Esto evita violar las reglas de React (conditional hooks)
    const useRefactored = isFeatureEnabled('USE_REFACTORED_CLIENTE_HOOKS');
    const debugMode = isFeatureEnabled('DEBUG_COMPARE_OLD_NEW');

    // ÔøΩ Decidir qu√© hook usar ANTES de llamarlo
    if (useRefactored) {
        try {
            console.log('üÜï Usando hooks refactorizados (v2)');
            const result = useClienteFormNew(isEditing, clienteAEditar, onSaveSuccess, modo);
            
            // üîç Modo debug: Mostrar resultado
            if (debugMode) {
                console.log('üîç Debug: Hook v2 resultado:', result);
            }
            
            return result;

        } catch (error) {
            // üö® Si falla la versi√≥n nueva, recargar con fallback
            console.error('‚ùå Error cr√≠tico en hooks refactorizados:', error);
            console.error('Stack trace:', error.stack);

            // Activar escape hatch autom√°ticamente
            if (typeof window !== 'undefined') {
                localStorage.setItem('forceOldCode', 'true');
                console.warn('üö® Escape hatch activado - Recargando p√°gina...');
                window.location.reload();
            }

            // Esto nunca se alcanzar√° por el reload, pero por seguridad:
            throw error;
        }
    }

    // üì¶ Usar versi√≥n original (comportamiento por defecto)
    if (debugMode) {
        console.log('üì¶ Usando hooks originales (v1)');
    }

    return useClienteFormOld(isEditing, clienteAEditar, onSaveSuccess, modo);
};

/**
 * Re-exportar para compatibilidad
 */
export default useClienteFormAdapter;
